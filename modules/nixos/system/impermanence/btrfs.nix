{
  config,
  inputs,
  lib,
  ...
}:
let
  inherit (lib)
    mkEnableOption
    mkIf
    mkOption
    types
    ;
  cfg = config.nixosConfig.system.impermanence.btrfs;

  wipeScript =
    # sh
    ''
      delete_subvolume_recursively() {
        IFS=$'\n'
        for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
          delete_subvolume_recursively "/btrfs_tmp/$i"
        done
        btrfs subvolume delete "$1"
      }

      mkdir /btrfs_tmp
      # partlabel are generated by disko, probably...
      mount /dev/disk/by-partlabel/disk-main-root /btrfs_tmp

      sv='@'

      mkdir -p "/btrfs_tmp/snapshots/$sv"
      timestamp=$(date --date="@$(stat -c %Y "/btrfs_tmp/$sv")" "+%Y-%m-%-d_%H:%M:%S")
      mv "/btrfs_tmp/$sv" "/btrfs_tmp/snapshots/$sv/$timestamp"

      for i in $(find "/btrfs_tmp/snapshots/$sv" -maxdepth 1 -mtime +7); do
        delete_subvolume_recursively "$i"
      done

      btrfs subvolume create "/btrfs_tmp/$sv"

      umount /btrfs_tmp
    '';
in
{
  options.nixosConfig.system.impermanence.btrfs = {
    enable = mkEnableOption "Impermanence on btrfs";

    device = mkOption {
      type = types.str;
      default = "";
      description = "The disk on which ephemeral btrfs will run.";
    };
  };

  imports = [
    inputs.disko.nixosModules.disko
  ];

  config = mkIf cfg.enable {
    boot.initrd = {
      enable = true;
      supportedFilesystems = [ "btrfs" ];
      systemd.enable = true;
      systemd.services.restore-root =
        let
          # /dev/disk/by-partlabel/rootfs
          root-device = "dev-disk-by\\x2dpartlabel-disk\\x2drootfs.device";
        in
        {
          description = "Rollback btrfs rootfs";
          wantedBy = [ "initrd.target" ];
          requires = [ root-device ];
          after = [ root-device ];
          before = [ "sysroot.mount" ];
          unitConfig.DefaultDependencies = "no";
          serviceConfig.Type = "oneshot";
          script = wipeScript;
        };
    };
  };
}
